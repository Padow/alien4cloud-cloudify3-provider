#parse("provider/common/generic_resource.yaml.vm")
#foreach($compute in ${deployment.computes})
#set($computeIsWindows = (${compute.nodeTemplate.type} == "alien.cloudify.aws.nodes.WindowsCompute"))
  ${compute.id}:
    type: ${compute.nodeTemplate.type}
    properties: ${util.natives.formatProperties(3, $compute.nodeTemplate.properties, $deployment.propertyMappings.get($compute.nodeTemplate.type))}
#if(${compute.scalingPolicy})
    instances:
#if(${compute.scalingPolicy.initialInstances})
      deploy: ${compute.scalingPolicy.initialInstances}
#else
      deploy: 1
#end
#end
#set($publicNetworks = ${util.network.getExternalNetworks($compute)} )
#if($util.collectionHasElement(${publicNetworks}) || $computeIsWindows)
    relationships:
#foreach($externalNetwork in $publicNetworks)
      - target: ${mapping.generatedNodePrefix}_floating_ip_${compute.id}_on_${externalNetwork.id}
        type: cloudify.aws.relationships.instance_connected_to_elastic_ip
#end
#end
#if($computeIsWindows)
      - type: cloudify.aws.relationships.instance_connected_to_keypair
        target: ${mapping.generatedNodePrefix}_key_pair_for_${compute.id}
    interfaces:
      cloudify.interfaces.lifecycle:
        start:
          max_retries: 40
      cloudify.interfaces.worker_installer:
        install:
          inputs:
            cloudify_agent: &CLOUDIFY_AGENT_${compute.id}
              service:
                successful_consecutive_status_queries_count: 10
                status_transition_sleep_interval: 5
                start_timeout: 240
                stop_timeout: 240
              user: ${compute.nodeTemplate.properties.get("user").value}
              password: ${compute.nodeTemplate.properties.get("password").value}
        start:
          inputs:
            cloudify_agent: *CLOUDIFY_AGENT_${compute.id}

        stop:
          inputs:
            cloudify_agent: *CLOUDIFY_AGENT_${compute.id}
        uninstall:
          inputs:
            cloudify_agent: *CLOUDIFY_AGENT_${compute.id}
        restart:
          inputs:
            cloudify_agent: *CLOUDIFY_AGENT_${compute.id}
      cloudify.interfaces.plugin_installer:
        install:
          inputs:
            cloudify_agent: *CLOUDIFY_AGENT_${compute.id}
  ${mapping.generatedNodePrefix}_key_pair_for_${compute.id}:
    type: cloudify.aws.nodes.KeyPair
    properties:
      resource_id: ${compute.nodeTemplate.properties.get("key_pair").value}
      use_external_resource: true
      private_key_path: ${compute.nodeTemplate.properties.get("private_key_path").value}
#end
#foreach($externalNetwork in $publicNetworks)
  ${mapping.generatedNodePrefix}_floating_ip_${compute.id}_on_${externalNetwork.id}:
    type: ${externalNetwork.nodeTemplate.type}
#end
#end