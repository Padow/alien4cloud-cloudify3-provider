#*
This template is used to generate cloudify 3 recipe from alien model
- $mapping --> contains global alien --> cloudify mapping
- $providerMapping --> contains IaaS provider specific mapping configuration
- $cloud --> contains alien4cloud.paas.cloudify3.configuration.CloudConfiguration instance
- $deployment --> contains Alien's deployment and types
- $util --> contains utility methods
*#
tosca_definitions_version: $mapping.dslVersion
#parse("provider/common/non_native_nodes.yaml.vm")

imports:
#foreach($import in $cloud.getImportsByLocation($deployment.locationType))
  - $import
#end
#if($util.collectionHasElement($deployment.nodesToMonitor))
  - http://www.getcloudify.org/spec/diamond-plugin/1.2.1/plugin.yaml
#end

node_types:
#parse("types.yaml.vm")

#if($util.collectionHasElement($deployment.nonNativesTypes))
#foreach($nonNativeType in ${deployment.nonNativesTypes})
  ${nonNativeType.elementId}:
    derived_from: $util.nonNative.getDerivedFromType($nonNativeType.derivedFrom)
#end
#end
#parse("provider/common/monitor_type.yaml.vm")

#if($util.collectionHasElement($deployment.nonNativesRelationshipTypes))
relationships:
#if($util.collectionHasElement($deployment.nonNativesRelationshipTypes))
#foreach($nonNativeRelationshipType in ${deployment.nonNativesRelationshipTypes})
  ${nonNativeRelationshipType.elementId}:
    derived_from: $util.nonNative.getDerivedFromType($nonNativeRelationshipType.derivedFrom)
#end
#end
#end

node_templates:
#parse("provider/${deployment.locationType}/compute_node.yaml.vm")
#parse("provider/${deployment.locationType}/network_node.yaml.vm")
#parse("provider/${deployment.locationType}/volume_node.yaml.vm")

#nonNativeNodes($deployment.nonNatives)

#parse("provider/common/monitor_node.yaml.vm")

plugins:
  custom_wf_plugin:
    executor: central_deployment_agent
    source: custom_wf_plugin

workflows:
#foreach($wfEntry in ${deployment.workflows.workflows.entrySet()})
  a4c_${wfEntry.key}: custom_wf_plugin.plugin.workflows.a4c_${wfEntry.key}
#end
  a4c_scale: custom_wf_plugin.plugin.workflows.a4c_scale
